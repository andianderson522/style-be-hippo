<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="code-size-ruleset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">
<description>Code Size PMD Rules</description>
<exclude-pattern>.*</exclude-pattern>
<include-pattern>.*style3.*.java</include-pattern>
<rule class="net.sourceforge.pmd.rules.design.LongMethodRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessiveMethodLength" message="Avoid really long methods." name="ExcessiveMethodLength" since="0.6" typeResolution="true">
<description>
Violations of this rule usually indicate that the method is doing
too much.  Try to reduce the method size by creating helper methods and removing any copy/pasted code.
   </description>
<priority>2</priority>
<properties>
<property name="minimum" value="200"/>
</properties>
<example><![CDATA[

public class Foo {
 public void doSomething() {
  System.out.println("Hello world!");
  System.out.println("Hello world!");
  // 98 copies omitted for brevity.
 }
}

   ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.design.LongParameterListRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessiveParameterList" message="Avoid really long parameter lists." name="ExcessiveParameterList" since="0.9" typeResolution="true">
<description>
Long parameter lists can indicate that a new object should be created to
 wrap the numerous parameters.  Basically, try to group the parameters together.
   </description>
<priority>1</priority>
<properties>
<property name="minimum" value="12"/>
</properties>
<example><![CDATA[

public class Foo {
 public void addData(
  int p0, int p1, int p2, int p3, int p4, int p5,
  int p5, int p6, int p7, int p8, int p9, int p10) {
  }
 }
}

   ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.design.LongClassRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessiveClassLength" message="Avoid really long classes." name="ExcessiveClassLength" since="0.6" typeResolution="true">
<description>
Long Class files are indications that the class may be trying to
do too much.  Try to break it down, and reduce the size to something
manageable.
   </description>
<priority>2</priority>
<properties>
<property name="minimum" value="1500"/>
</properties>
<example><![CDATA[

public class Foo {
  public void bar() {
    // 1000 lines of code
  }
}

   ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.CyclomaticComplexity" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#CyclomaticComplexity" message="The {0} ''{1}'' has a Cyclomatic Complexity of {2}." name="CyclomaticComplexity" since="1.03" typeResolution="true">
<description>

Complexity is determined by the number of decision points in a method plus one for the
method entry.  The decision points are 'if', 'while', 'for', and 'case labels'.  Generally,
1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity,
 and 11+ is very high complexity.

   </description>
<priority>4</priority>
<properties>
<property name="showMethodsComplexity" value="true"/>
<property name="showClassesComplexity" value="true"/>
<property name="reportLevel" value="15"/>
</properties>
<example><![CDATA[

// Cyclomatic Complexity = 12
public class Foo {
1   public void example()  {
2       if (a == b)  {
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n < h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}

   ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.ExcessivePublicCount" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessivePublicCount" message="This class has a bunch of public methods and attributes" name="ExcessivePublicCount" since="1.04" typeResolution="true">
<description>
A large number of public methods and attributes declared in a class can indicate the
 class may need to be broken up as increased effort will be required to thoroughly test it.
    </description>
<priority>4</priority>
<properties>
<property name="minimum" value="45"/>
</properties>
<example><![CDATA[

public class Foo {
 public String value;
 public Bar something;
 public Variable var;
 // [... more more public attributes ...]
 public void doWork() {}
 public void doMoreWork() {}
 public void doWorkAgain() {}
 // [... more more public methods ...]
}

    ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#TooManyMethods" message="This class has too many methods, consider refactoring it." name="TooManyMethods" since="4.2" typeResolution="true">
<description>

A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to
have more fine grained objects.

        </description>
<priority>1</priority>
<properties>
<property name="maxmethods" value="100"/>
<property name="xpath">
<value><![CDATA[


                     //ClassOrInterfaceDeclaration/ClassOrInterfaceBody
                    [
                        count(descendant::MethodDeclarator[
                            not
                            (
                            starts-with(@Image,'get')
                                or
                            starts-with(@Image,'set')
                            )
                        ]) > $maxmethods
                    ]

                ]]></value>
</property>
</properties>
</rule>
</ruleset>
