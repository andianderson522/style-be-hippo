<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="controversial-ruleset" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">
<description>Controversial PMD Rules</description>
<exclude-pattern>.*</exclude-pattern>
<include-pattern>.*style3.*.java</include-pattern>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#UnnecessaryConstructor" message="Avoid unnecessary constructors - the compiler will generate these for you" name="UnnecessaryConstructor" since="1.0" typeResolution="true">
<description>
This rule detects when a constructor is not necessary; i.e., when there's only one constructor,
it's public, has an empty body, and takes no arguments.
      </description>
<priority>1</priority>
<properties>
<property name="xpath">
<value><![CDATA[

//ClassOrInterfaceBody[count(ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)=1]
/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration
[@Public='true']
[not(FormalParameters/*)]
[not(BlockStatement)]
[not(NameList)]
[count(ExplicitConstructorInvocation/Arguments/ArgumentList/Expression)=0]

                ]]></value>
</property>
</properties>
<example><![CDATA[

public class Foo {
 public Foo() {}
}

      ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.design.NullAssignmentRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#NullAssignment" message="Assigning an Object to null is a code smell.  Consider refactoring." name="NullAssignment" since="1.02" typeResolution="true">
<description>
 Assigning a "null" to a variable (outside of its declaration) is usually
 bad form.  Some times, the assignment is an indication that the programmer doesn't
 completely understand what is going on in the code.  NOTE: This sort of assignment
 may in rare cases be useful to encourage garbage collection.  If that's what you're using
 it for, by all means, disregard this rule :-)
      </description>
<priority>2</priority>
<example><![CDATA[

 public class Foo {
   public void bar() {
     Object x = null; // This is OK.
     x = new Object();
     // Big, complex piece of code here.
     x = null; // This is BAD.
     // Big, complex piece of code here.
   }
 }


      ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.UnusedModifier" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#UnusedModifier" message="Avoid modifiers which are implied by the context" name="UnusedModifier" since="1.02" typeResolution="true">
<description>&#13;
 Fields in interfaces are automatically public static final, and&#13;
 methods are public abstract.&#13;
 Classes or interfaces nested in an interface are automatically public&#13;
 and static (all nested interfaces are automatically static).&#13;
 For historical reasons, modifiers which are implied by the context&#13;
 are accepted by the compiler, but are superfluous.&#13;
     </description>
<priority>4</priority>
<example><![CDATA[

public interface Foo {
 public abstract void bar(); // both abstract and public are ignored by the compiler
 public static final int X = 0; // public, static, and final all ignored
 public static class Bar {} // public, static ignored
 public static interface Baz {} // ditto
}
public class Bar {
 public static interface Baz {} // static ignored
}

     ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#CallSuperInConstructor" message="It is a good practice to call super() in a constructor" name="CallSuperInConstructor" since="3.0" typeResolution="true">
<description>
It is a good practice to call super() in a constructor. If super() is not called but
 another constructor (such as an overloaded constructor) is called, this rule will not report it.
      </description>
<priority>3</priority>
<properties>
<property name="xpath">
<value><![CDATA[

//ClassOrInterfaceDeclaration[ count (ExtendsList/*) > 0 ]
/ClassOrInterfaceBody
 /ClassOrInterfaceBodyDeclaration
 /ConstructorDeclaration[ count (.//ExplicitConstructorInvocation)=0 ]

              ]]></value>
</property>
</properties>
<example><![CDATA[

public class Foo extends Bar{
 public Foo() {
  // call the constructor of Bar
  super();
 }
 public Foo(int code) {
  // do something with code
  this();
  // no problem with this
 }
}

      ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#UnnecessaryParentheses" message="This statement may have some unnecessary parentheses" name="UnnecessaryParentheses" since="3.1" typeResolution="true">
<description>
Sometimes expressions are wrapped in unnecessary parentheses,
making them look like a function call.
      </description>
<priority>2</priority>
<properties>
<property name="xpath">
<value><![CDATA[

//ReturnStatement
          /Expression
           /PrimaryExpression
            /PrimaryPrefix
             /Expression[count(*)=1]
              /PrimaryExpression
              /PrimaryPrefix
              ]]></value>
</property>
</properties>
<example><![CDATA[
  public class Foo {
      boolean bar() {
          return (true);
      }
  }
      ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#BooleanInversion" message="Use bitwise inversion to invert boolean values" name="BooleanInversion" since="3.5" typeResolution="true">
<description>
Use bitwise inversion to invert boolean values - it's the fastest way to do this.
See http://www.javaspecialists.co.za/archive/newsletter.do?issue=042&amp;locale=en_US for specific details
      </description>
<priority>5</priority>
<properties>
<property name="xpath">
<value><![CDATA[

//AssignmentOperator[@Image="="]/../Expression/UnaryExpressionNotPlusMinus[@Image="!"]

             ]]></value>
</property>
</properties>
<example><![CDATA[

public class Foo {
 public void main(bar) {
  boolean b = true;
  b = !b; // slow
  b ^= true; // fast
 }
}

      ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#AvoidUsingShortType" message="Do not use the short type" name="AvoidUsingShortType" since="4.1" typeResolution="true">
<description>

            Java uses the 'short' type to reduce memory usage, not to optimize calculation. In fact, the jvm does not have any
            arithmetic capabilities for the short type: the jvm must convert the short into an int, do the proper caculation
            and convert the int back to a short. So, the use of the 'short' type may have a greater impact than memory usage.

        </description>
<priority>1</priority>
<properties>
<property name="xpath">
<value><![CDATA[

            //PrimitiveType[@Image = 'short']

                ]]></value>
</property>
</properties>
<example><![CDATA[

    public class UsingShort
    {
        private short doNotUseShort = 0;

        public UsingShort() {
            short shouldNotBeUsed = 1;
            doNotUseShort += shouldNotBeUsed;
        }
     }

         ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#AvoidUsingVolatile" message="Use of modifier volatile is not recommended." name="AvoidUsingVolatile" since="4.1" typeResolution="true">
<description>

Use of the keyword 'volatile' is general used to fine tune a Java application, and therefore, requires
a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,
the volatile keyword should not be used for maintenance purpose and portability.

        </description>
<priority>2</priority>
<properties>
<property name="xpath">
<value><![CDATA[

                        //FieldDeclaration[
                                contains(@Volatile,'true')
                        ]

                ]]></value>
</property>
</properties>
<example><![CDATA[

                public class ThrDeux {
                    private volatile String var;

                }

        ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#AvoidUsingNativeCode" message="The use of native code is not recommended." name="AvoidUsingNativeCode" since="4.1" typeResolution="true">
<description>

                As JVM and Java language offer already many help in creating application, it should be
                very rare to have to rely on non-java code. Even though, it is rare to actually have to
                use Java Native Interface (JNI). As the use of JNI make application less portable, and
                harder to maintain, it is not recommended.

        </description>
<priority>2</priority>
<properties>
<property name="xpath">
<value><![CDATA[

                        //Name[starts-with(@Image,'System.loadLibrary')]

                ]]></value>
</property>
</properties>
<example><![CDATA[

                public class SomeJNIClass {
                        public SomeJNIClass() {
                                System.loadLibrary("nativelib");
                        }

                        static {
                             System.loadLibrary("nativelib");
                        }

                        public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
                                System.loadLibrary("nativelib");
                        }
                }

        ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#AvoidAccessibilityAlteration" message="You should modify visibility of class or methods using getDeclaredConstructors(), getDeclaredConstructor(Class[]), setAccessible() or PrivilegedAction." name="AvoidAccessibilityAlteration" since="4.1" typeResolution="true">
<description>

            Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(),
            as the interface PrivilegedAction, allow to alter, at runtime, the visilibilty of variable, classes, or
            methods, even if they are private. Obviously, no one should do so, as such behavior is against everything
            encapsulation principal stands for.

        </description>
<priority>1</priority>
<properties>
<property name="xpath">
<value><![CDATA[

                        //PrimaryExpression[
                        (
                        (PrimarySuffix[
                                ends-with(@Image,'getDeclaredConstructors')
                                        or
                                ends-with(@Image,'getDeclaredConstructor')
                                        or
                                ends-with(@Image,'setAccessible')
                                ])
                        or
                        (PrimaryPrefix/Name[
                                ends-with(@Image,'getDeclaredConstructor')
                                or
                                ends-with(@Image,'getDeclaredConstructors')
                                or
                                starts-with(@Image,'AccessibleObject.setAccessible')
                                ])
                        )
                        and
                        (//ImportDeclaration/Name[
                                contains(@Image,'java.security.PrivilegedAction')])
                ]

                ]]></value>
</property>
</properties>
<example><![CDATA[


            import java.lang.reflect.AccessibleObject;
            import java.lang.reflect.Method;
            import java.security.PrivilegedAction;

            public class Violation {
                public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
                    // Possible call to forbidden getDeclaredConstructors
                    Class[] arrayOfClass = new Class[1];
                    this.getClass().getDeclaredConstructors();
                    this.getClass().getDeclaredConstructor(arrayOfClass);
                    Class clazz = this.getClass();
                    clazz.getDeclaredConstructor(arrayOfClass);
                    clazz.getDeclaredConstructors();

                    // Possible call to forbidden setAccessible
                    clazz.getMethod("", arrayOfClass).setAccessible(false);
                    AccessibleObject.setAccessible(null, false);
                    Method.setAccessible(null, false);
                    Method[] methodsArray = clazz.getMethods();
                    int nbMethod;
                    for ( nbMethod = 0; nbMethod < methodsArray.length; nbMethod++ ) {
                        methodsArray[nbMethod].setAccessible(false);
                    }

                    // Possible call to forbidden PrivilegedAction
                    PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();
                }
            }

            ]]></example>
</rule>
<rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#DoNotCallGarbageCollectionExplicitly" message="Do not explicitly trigger a garbage collection." name="DoNotCallGarbageCollectionExplicitly" since="4.2" typeResolution="true">
<description>

                Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the
                same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not.
                Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory
            leaks develop within an application, it should be dealt with JVM options rather than within the code itself.

        </description>
<priority>2</priority>
<properties>
<property name="xpath">
<value><![CDATA[

//Name[
(starts-with(@Image, 'System.') and
(starts-with(@Image, 'System.gc') or
starts-with(@Image, 'System.runFinalization'))) or
(
starts-with(@Image,'Runtime.getRuntime') and
../../PrimarySuffix[ends-with(@Image,'gc')]
)
]

                ]]></value>
</property>
</properties>
<example><![CDATA[
            [
            public class GCCall
            {
         public GCCall()
                    {
                        // Explicit gc call !
                        System.gc();
                    }
    public void doSomething()
     {
        // Explicit gc call !
        Runtime.getRuntime().gc();
    }

public explicitGCcall() { // Explicit gc call ! System.gc(); }

public void doSomething() { // Explicit gc call ! Runtime.getRuntime().gc(); } }



        ]]></example>
</rule>
</ruleset>
